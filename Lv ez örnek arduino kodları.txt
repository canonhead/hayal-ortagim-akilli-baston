1)
Reading Analog Voltage
void setup (){
  Serial.begin(9600);
}
Reading Pulse Width
void setup (){
  Serial.begin(9600);
  pinMode(pwPin1, INPUT);
}
void read_sensor (){
  anVolt = analogRead(anPin);
  mm = anVolt*5;      //Takes bit count and converts it to mm
  inches = mm/25.4;   //Takes mm and converts it to inches
}

void read_sensor (){
  sensor = pulseIn(pwPin1, HIGH);
  mm = sensor;      //Takes the pulse width and tells Arduino it is equal to millimeters
  inches = mm/25.4;   //Takes mm and converts it to inches
}
2)

// Written by : Mohannad Rawashdeh
// this code foe EZ0 Max sonar , analog interface
// http://www.instructables.com/member/Mohannad+Rawashdeh/
//.................................................
float Inch=0.00;
float cm=0.00;
int SonarPin=A0;
int  sensorValue;
void setup(){
pinMode(SonarPin,INPUT);
Serial.begin(9600);
}
void loop(){
sensorValue=analogRead(SonarPin);
delay(50);
Inch= (sensorValue*0.497);
cm=Inch*2.54;
Serial.println(sensorValue);
Serial.print(Inch);
Serial.println("inch");
Serial.print(cm);
Serial.println("cm");
delay(100);
}
3)


long anVolt, inches, cm;
int sum = 0; //Create sum variable so it can be averaged
int avgrange = 60; //Quantity of values to average (sample size)

void setup()
{
  //This opens up a serial connection to shoot the results back to the PC console
  Serial.begin(9600);
}

void loop()
{
  //MaxSonar Analog reads are known to be very sensitive. See the Arduino forum for more information.
  //A simple fix is to average out a sample of n readings to get a more consistent reading.
  //Even with averaging I still find it to be less accurate than the PW method.
  //This loop gets 60 reads and averages them

  for (int i = 0; i < avgrange ; i++)
  {
    //Used to read in the analog voltage output that is being sent by the MaxSonar device.
    //Scale factor is (Vcc/512) per inch. A 5V supply yields ~9.8mV/in
    //Arduino analog pin goes from 0 to 1024, so the value has to be divided by 2 to get the actual inches
    anVolt = analogRead(anPin) / 2;
    sum += anVolt;
    delay(10);
  }

  inches = sum / avgrange;
  cm = inches * 2.54;
  Serial.print(inches);
  Serial.print("in, ");
  Serial.print(cm);
  Serial.print("cm");
  Serial.println();

  //reset sample total
  sum = 0;

  delay(500);
}
4)


const int pwPin = 7;

//variables needed to store values
long pulse, inches, cm;

void setup()
{
  //This opens up a serial connection to shoot the results back to the PC console
  Serial.begin(9600);
}

void loop()
{
  pinMode(pwPin, INPUT);

  //Used to read in the pulse that is being sent by the MaxSonar device.
  //Pulse Width representation with a scale factor of 147 uS per Inch.

  pulse = pulseIn(pwPin, HIGH);
  //147uS per inch
  inches = pulse / 147;
  //change inches to centimetres
  cm = inches * 2.54;

  Serial.print(inches);
  Serial.print("in, ");
  Serial.print(cm);
  Serial.print("cm");
  Serial.println();

  delay(500);
}
5)

const int pwPin = 7;
//variables needed to store values
int arraysize = 9;  //quantity of values to find the median (sample size). Needs to be an odd number

//declare an array to store the samples. not necessary to zero the array values here, it just makes the code clearer
int rangevalue[] = {  0, 0, 0, 0, 0, 0, 0, 0, 0};
long pulse;
int modE;

void setup()
{
  //Open up a serial connection
  Serial.begin(9600);
  //Wait for the serial connection
  delay(500);
}

//Main loop where the action takes place
void loop()
{
  pinMode(pwPin, INPUT);

  for (int i = 0; i < arraysize; i++)
  {

    pulse = pulseIn(pwPin, HIGH);
    rangevalue[i] = pulse / 58;
    delay(10);
  }

  Serial.print("Unsorted: ");
  printArray(rangevalue, arraysize);
  isort(rangevalue, arraysize);
  Serial.print("Sorted: ");
  printArray(rangevalue, arraysize);
  modE = mode(rangevalue, arraysize);
  Serial.print("The mode/median is: ");
  Serial.print(modE);
  Serial.println();
  delay(1000);
}


/*-----------Functions------------*/
//Function to print the arrays.
void printArray(int *a, int n)
{
  for (int i = 0; i < n; i++)
  {
    Serial.print(a[i], DEC);
    Serial.print(' ');
  }

  Serial.println();
}

//Sorting function
// sort function (Author: Bill Gentles, Nov. 12, 2010)
void isort(int *a, int n) {
  //  *a is an array pointer function

  for (int i = 1; i < n; ++i)
  {
    int j = a[i];
    int k;
    for (k = i - 1; (k >= 0) && (j < a[k]); k--)
    {
      a[k + 1] = a[k];
    }
    a[k + 1] = j;
  }
}

//Mode function, returning the mode or median.
int mode(int *x, int n) {
  int i = 0;
  int count = 0;
  int maxCount = 0;
  int mode = 0;
  int bimodal;
  int prevCount = 0;

  while (i < (n - 1)) {
    prevCount = count;
    count = 0;

    while (x[i] == x[i + 1]) {
      count++;
      i++;
    }

    if (count > prevCount & count > maxCount) {
      mode = x[i];
      maxCount = count;
      bimodal = 0;
    }
    if (count == 0) {
      i++;
    }
    if (count == maxCount) { //If the dataset has 2 or more modes.
      bimodal = 1;
    }
    if (mode == 0 || bimodal == 1) { //Return the median if there is no mode.
      mode = x[(n / 2)];
    }
    return mode;
  }
}




